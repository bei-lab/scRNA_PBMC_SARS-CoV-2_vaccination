library(Seurat)
library(Matrix)
library(gridExtra)
library(stringi)
library(ComplexHeatmap)
library(circlize)
library(reshape2)
library(scales)
library(rlang)
library(future)
library(ggrepel)
# library(harmony)
library(rstatix)
library(dplyr)
library(stringr)
library(ggthemes)
library(cowplot)
library(data.table)
library(parallel)
library(RColorBrewer)
library(pheatmap)
library(tidyr)
library(readr)
library(cba)
library(ggplot2)
library(plyr)
library(ggpubr)
library(ggsci)
library(sigminer)
library(VennDiagram)
library(ggtern)
library(pbapply)

#######################################--------------------------------------################################
color_used <- c(pal_npg()(10),pal_igv()(9),pal_uchicago("light")(9),pal_futurama()(12), pal_aaas()(10), pal_jama()(7))[-8]
condition_colors <- c("#E64B35FF", "#00A087FF", "#ADE2D0FF", "#3C5488FF", "#8491B4FF", "#D6D6CEFF", "#B09C85FF", "#7E6148FF")[c(6:8, 1:5)]

#####--------------- B cells-----------------###########
meta_sampleinfo <- read.table("GSE158055_cell_annotation.csv", sep = ",", header = T, row.names = NULL, stringsAsFactors = F) %>% dolyr::select(1:2)
B_cells_meta.data <- read.table("E:\\8.Everyday_working\\R\\20211028_COVID19_Virus_reanalysis\\B\\meta.data.of.B.cells.txt", header = T, row.names = 1, stringsAsFactors = F, sep = "\t", comment.char = "", encoding = "UTF-8")
IgG <- read.table("E:\\8.Everyday_working\\R\\20211028_COVID19_Virus_reanalysis\\All_cell\\Annotation.all_cells.meta.data_788534_COVID19_virus.txt", sep = "\t", header = T, row.names = NULL, stringsAsFactors = F)
B_cells_meta.data$IgG <- mapvalues(B_cells_meta.data %>% row.names, from = IgG$row.names, to = IgG$IgG, warn_missing = F)

bei <- B_cells_meta.data %>% subset(orig.ident != "Zhang" ) %>% dplyr::select(orig.ident, SampleID, fixed_sample_ID:Samples_new, Sampleinfo:Groups, Condition, Major_celltype)

bei$Sample_s <- bei %>% row.names %>% gsub(pattern = "_1_.*", replacement = "") %>%
  gsub(pattern = "_hashtag_gene_.*", replacement = "") %>%
  gsub(pattern = "_hashtag_gene*", replacement = "_1") %>%
  gsub(pattern = "_cDNA", replacement = "") 

bei$barcodes <- bei %>% row.names %>% gsub(pattern = "S.*_hashtag_gene_1_", replacement = "") %>%
  gsub(pattern = "S.*_hashtag_gene_", replacement = "")

bei$fixed_barcodes <- paste0(bei$Sample_s, "_", bei$barcodes)

###-------------BCR clone types information-------------####
dat <- data.frame()

for (sample in dir() %>% grep(pattern = ".csv", value = T)) {
  if(nchar(sample) < 20){
    fixed_sample_name <- sample %>% gsub(pattern = "_TCR.BCR.csv", replacement = "") %>% gsub(pattern = ".csv", replacement = "") 
    tmp <- read.table(sample, header = T, row.names = NULL, sep = ",", stringsAsFactors = F)
    tmp$barcode <- paste0(fixed_sample_name, "_", tmp$barcode)
    print(c(sample, tmp %>% dim))
    dat <- rbind(dat, tmp)
  }
}

dat <- dat[dat$barcode %in% bei$fixed_barcodes, ]
dat$Sample_s <-  mapvalues(dat$barcode, from = bei$fixed_barcodes, to = bei$Sample_s, warn_missing = F)
dat$raw_barcode <- mapvalues(dat$barcode, from = bei$fixed_barcodes, to = bei %>% rownames(), warn_missing = F)

#####------------------------------Zhang---------------------------------------####
zhang <- B_cells_meta.data %>% subset(orig.ident == "Zhang" ) %>% dplyr::select(orig.ident, SampleID, fixed_sample_ID:Samples_new, Sampleinfo:Groups, Condition, Major_celltype)
zhang$Sample_s <- zhang$SampleID
zhang$barcodes <- zhang %>% row.names %>% gsub(pattern = "-.*", replacement = "")
zhang$fixed_barcodes <- paste0(zhang$Sample_s, "_", zhang$barcodes, "-1")

dat1 <- data.frame()
for (sample in dir() %>% grep(pattern = ".csv", value = T) %>% grep(pattern = "GSE158055|CoV-AbDab_281221", value = T, invert = T)) {
  if(nchar(sample) > 20){
    fixed_sample_name <- sample %>% gsub(pattern = "_filtered_contig_annotations.csv", replacement = "")
    tmp <- read.table(sample, header = T, row.names = NULL, sep = ",", stringsAsFactors = F)
    tmp$barcode <- paste0(fixed_sample_name, "_", tmp$barcode)
    print(c(sample, tmp %>% dim))
    dat1 <- rbind(dat1, tmp)
  }
}

dat1 <- dat1[dat1$barcode %in% zhang$fixed_barcodes, ]
dat1$Sample_s <- mapvalues(dat1$barcode, from = zhang$fixed_barcodes, to = zhang$Sample_s, warn_missing = F)
dat1$raw_barcode <- mapvalues(dat1$barcode, from = zhang$fixed_barcodes, to = zhang %>% rownames(), warn_missing = F)

merged_dat <- rbind(dat, dat1)### clonetype information

merged_dat$is_cell <- NULL 
merged_dat$contig_id <- NULL
merged_dat$fwr1_nt <- NULL
merged_dat$fwr2_nt <- NULL
merged_dat$raw_consensus_id <- NULL

merged_meta.data <- rbind(bei, zhang) ### metadat information

merged_dat$Sampleinfo <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Sampleinfo, warn_missing = F)
merged_dat$Vaccine_type <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Vaccine_type, warn_missing = F)
merged_dat$Groups <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Groups, warn_missing = F)
merged_dat$IgG <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$IgG, warn_missing = F)
merged_dat$Sex <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Sex, warn_missing = F)
merged_dat$Condition <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Condition, warn_missing = F)
merged_dat$Time_point <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Time_point, warn_missing = F)
merged_dat$Major_celltype <- mapvalues(merged_dat$raw_barcode, from = merged_meta.data %>% rownames(), to = merged_meta.data$Major_celltype, warn_missing = F)

merged_dat %>% write.table(file = "merged_BCR.information_pri.txt", sep = "\t", col.names = T, row.names = T)
merged_meta.data %>% write.table("merged_meta.B_data.txt", col.names = T, row.names = T, sep = "\t")
merged_meta.data <- read.table("merged_meta.B_data.txt", header = T, row.names = 1, sep = "\t")
merged_dat <- read.table("merged_BCR.information_pri.txt", header = T, row.names = 1, stringsAsFactors = F, sep = "\t")
#################

##-------------------remove the cells with only one chain---------#################
B_cell_clone <- merged_dat
multiple_chains <- B_cell_clone[duplicated(B_cell_clone$raw_barcode), ] %>% `[`(, "raw_barcode") %>% unique()
B_cell_clone <- B_cell_clone[B_cell_clone$raw_barcode %in% multiple_chains, ]

barcodes_cells <- unique(B_cell_clone$raw_barcode)

library(parallel)
cl <- makeCluster(6)
clusterExport(cl = cl, varlist = c("barcodes_cells", "B_cell_clone"))
clusterEvalQ(cl, library(dplyr))

qualited_B_cells <- parLapply(cl, barcodes_cells, fun = function(x){
  tmp <- B_cell_clone[B_cell_clone$raw_barcode  %in% x, "chain"] %>% unlist
  if(all(c(("IGH" %in% tmp) == TRUE), any("IGK" %in% tmp, "IGL" %in% tmp))){
    return(x)
  }
}) %>% do.call(rbind, .)
stopCluster (cl)

B_cell_clone_uniq <- B_cell_clone[B_cell_clone$raw_barcode %in% qualited_B_cells, ]
B_cell_clone_uniq <- subset(B_cell_clone_uniq, c_gene != "")

###-------------------remove the cells with only one chain---------#################
multiple_chains <- B_cell_clone_uniq[duplicated(B_cell_clone_uniq$raw_barcode), ] %>% `[`(, "raw_barcode") %>% unique()
B_cell_clone_uniq <- B_cell_clone_uniq[B_cell_clone_uniq$raw_barcode %in% multiple_chains, ] ##61365 qualited B cells
B_cell_clone_uniq$unique_clone <-  with(B_cell_clone_uniq, paste0(v_gene, j_gene, cdr3))

BCR_info <- dplyr::select(B_cell_clone_uniq, c(raw_barcode, chain, unique_clone))

library(parallel)
cl <- makeCluster(7) 
barcodes_cells <- BCR_info$raw_barcode %>% unique
clusterExport(cl = cl, varlist = c("BCR_info", "barcodes_cells"))
clusterEvalQ(cl, library(dplyr))

customer_clone <- pblapply(cl = cl, X = barcodes_cells, FUN = function(x){
  tmp <- BCR_info %>% subset(raw_barcode == x) %>% dplyr::select(chain, unique_clone) %>% arrange(desc(chain), desc(unique_clone))
  clonetype_customer <- tmp$unique_clone %>% paste0(., collapse = "")
  # dat <- data.frame(cellbarcode = x, clonetype_customer = clonetype_customer)
  dat <- c(cellbarcode = x, clonetype_customer = clonetype_customer)### ??һ????????һ??????һ????
}) %>% do.call(rbind, .)

stopCluster(cl)

customer_clone <- customer_clone %>% as.data.frame()
# customer_clone %>% write.table("customer_clone.txt", sep = "\t", col.names = T, row.names = T)

B_cell_clone_uniq$customer_clone <- mapvalues(B_cell_clone_uniq$raw_barcode, from = customer_clone$cellbarcode, to = customer_clone$clonetype_customer, warn_missing = F)

unique_BCR <- B_cell_clone_uniq %>% dplyr::select(raw_barcode, customer_clone) %>% unique
multiple_clones <- (c((unique_BCR$customer_clone %>% table) > 1) %>% names)[c(unique_BCR$customer_clone %>% table) > 1]
B_cell_clone_uniq$multiple_clones <- mapvalues(B_cell_clone_uniq$customer_clone, from = multiple_clones, to = rep("Multiple", time = length(multiple_clones)), warn_missing = FALSE)
B_cell_clone_uniq$multiple_clones <- gsub(B_cell_clone_uniq$multiple_clones, pattern = "^I.*", replacement = "Single")

unique_BCR_pri <- B_cell_clone_uniq %>% dplyr::select(raw_barcode, customer_clone, Sampleinfo) %>% unique
# unique_BCR_pri$customer_clone <- paste0(unique_BCR_pri$customer_clone, unique_BCR_pri$Sampleinfo)
unique_BCR_pri <- unique_BCR_pri %>% unique

dats <- data.frame()
x <- 1
for(variable in unique_BCR_pri$Sampleinfo %>% unique) {
  unique_BCR <- subset(unique_BCR_pri, Sampleinfo == variable)
  Two_Ten <- c(table(unique_BCR$customer_clone) %>% names)[table(unique_BCR$customer_clone) >= 2 & table(unique_BCR$customer_clone) < 10]
  Ten_fifty <- c(table(unique_BCR$customer_clone) %>% names)[table(unique_BCR$customer_clone) >= 10 & table(unique_BCR$customer_clone) < 50]
  Fifty_100 <- c(table(unique_BCR$customer_clone) %>% names)[table(unique_BCR$customer_clone) >= 50 & table(unique_BCR$customer_clone) < 100]
  one100_200 <- c(table(unique_BCR$customer_clone) %>% names)[table(unique_BCR$customer_clone) >= 100 & table(unique_BCR$customer_clone) < 200]
  Two200 <- c(table(unique_BCR$customer_clone) %>% names)[table(unique_BCR$customer_clone) >= 200]
  
  df1 <- data.frame(customer_clones = c(Two_Ten, Ten_fifty, Fifty_100, one100_200, Two200),
                    state = rep(c("2-10", "10-50", "50-100", "100-200", ">200"), time = c(sapply(list(Two_Ten, Ten_fifty, Fifty_100, one100_200, Two200), length))))
  unique_BCR$clone_state <- mapvalues(unique_BCR$customer_clone, from = df1$customer_clones, to = df1$state, warn_missing = F)
  unique_BCR$clone_state <- gsub(unique_BCR$clone_state, pattern = "^I.*", replacement = "Single")
  dats <- rbind(unique_BCR, dats)
  print(variable)
  print(x)
  x <- x + 1
  rm(df1, unique_BCR, Two_Ten, Ten_fifty, Fifty_100, one100_200, Two200)
}

B_cell_clone_uniq$clone_state <- mapvalues(B_cell_clone_uniq$customer_clone, from = dats$customer_clone, to = dats$clone_state, warn_missing = F)
B_cell_clone_uniq$clone_state <- gsub(B_cell_clone_uniq$clone_state, pattern = "^I.*", replacement = "Single")

meta_sampleinfo <- read.table("E:\\8.Everyday_working\\R\\20210713_COV19_vaccine\\COV19_selected_sample_metadata.csv",
                              sep = ",", header = T, row.names = NULL, stringsAsFactors = F, comment.char = "") 

B_cell_clone_uniq %>% write.table(file = "merged_BCR.information_at_least_one_paired_VDJ.txt", sep = "\t", col.names = T, row.names = T)

merged_meta.data$cloned_Bcells <- plyr::mapvalues(merged_meta.data %>% row.names(), from = B_cell_clone_uniq$raw_barcode, to = B_cell_clone_uniq$Sampleinfo, warn_missing = F)
merged_meta.data$multiple_clones <- mapvalues(merged_meta.data %>% row.names(), from = B_cell_clone_uniq$raw_barcode, to = B_cell_clone_uniq$multiple_clones, warn_missing = F)
merged_meta.data$multiple_clones <- gsub(merged_meta.data$multiple_clones, pattern = ".*-.*", replacement = "Not")

merged_meta.data$customer_clone <- mapvalues(merged_meta.data %>% row.names(), from = B_cell_clone_uniq$raw_barcode, to = B_cell_clone_uniq$customer_clone, warn_missing = F)
merged_meta.data %>% write.table("merged_meta.B_data.txt", col.names = T, row.names = T, sep = "\t")

